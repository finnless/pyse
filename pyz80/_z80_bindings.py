# -*- coding: utf-8 -*-
# Auto-generated by generate_bindings.py. DO NOT EDIT.
import ctypes

# --- Define z80_t as an opaque structure ---
# We don't need its internal layout in Python anymore
class z80_t(ctypes.Structure):
    pass # Opaque structure

# --- Constants from header ---
Z80_PIN_A0 = 0
Z80_PIN_A1 = 1
Z80_PIN_A2 = 2
Z80_PIN_A3 = 3
Z80_PIN_A4 = 4
Z80_PIN_A5 = 5
Z80_PIN_A6 = 6
Z80_PIN_A7 = 7
Z80_PIN_A8 = 8
Z80_PIN_A9 = 9
Z80_PIN_A10 = 10
Z80_PIN_A11 = 11
Z80_PIN_A12 = 12
Z80_PIN_A13 = 13
Z80_PIN_A14 = 14
Z80_PIN_A15 = 15
Z80_PIN_D0 = 16
Z80_PIN_D1 = 17
Z80_PIN_D2 = 18
Z80_PIN_D3 = 19
Z80_PIN_D4 = 20
Z80_PIN_D5 = 21
Z80_PIN_D6 = 22
Z80_PIN_D7 = 23
Z80_PIN_M1 = 24
Z80_PIN_MREQ = 25
Z80_PIN_IORQ = 26
Z80_PIN_RD = 27
Z80_PIN_WR = 28
Z80_PIN_HALT = 29
Z80_PIN_INT = 30
Z80_PIN_RES = 31
Z80_PIN_NMI = 32
Z80_PIN_WAIT = 33
Z80_PIN_RFSH = 34
Z80_PIN_IEIO = 37
Z80_PIN_RETI = 38
Z80_A0 = (1 << Z80_PIN_A0)
Z80_A1 = (1 << Z80_PIN_A1)
Z80_A2 = (1 << Z80_PIN_A2)
Z80_A3 = (1 << Z80_PIN_A3)
Z80_A4 = (1 << Z80_PIN_A4)
Z80_A5 = (1 << Z80_PIN_A5)
Z80_A6 = (1 << Z80_PIN_A6)
Z80_A7 = (1 << Z80_PIN_A7)
Z80_A8 = (1 << Z80_PIN_A8)
Z80_A9 = (1 << Z80_PIN_A9)
Z80_A10 = (1 << Z80_PIN_A10)
Z80_A11 = (1 << Z80_PIN_A11)
Z80_A12 = (1 << Z80_PIN_A12)
Z80_A13 = (1 << Z80_PIN_A13)
Z80_A14 = (1 << Z80_PIN_A14)
Z80_A15 = (1 << Z80_PIN_A15)
Z80_D0 = (1 << Z80_PIN_D0)
Z80_D1 = (1 << Z80_PIN_D1)
Z80_D2 = (1 << Z80_PIN_D2)
Z80_D3 = (1 << Z80_PIN_D3)
Z80_D4 = (1 << Z80_PIN_D4)
Z80_D5 = (1 << Z80_PIN_D5)
Z80_D6 = (1 << Z80_PIN_D6)
Z80_D7 = (1 << Z80_PIN_D7)
Z80_M1 = (1 << Z80_PIN_M1)
Z80_MREQ = (1 << Z80_PIN_MREQ)
Z80_IORQ = (1 << Z80_PIN_IORQ)
Z80_RD = (1 << Z80_PIN_RD)
Z80_WR = (1 << Z80_PIN_WR)
Z80_HALT = (1 << Z80_PIN_HALT)
Z80_INT = (1 << Z80_PIN_INT)
Z80_RES = (1 << Z80_PIN_RES)
Z80_NMI = (1 << Z80_PIN_NMI)
Z80_WAIT = (1 << Z80_PIN_WAIT)
Z80_RFSH = (1 << Z80_PIN_RFSH)
Z80_IEIO = (1 << Z80_PIN_IEIO)
Z80_RETI = (1 << Z80_PIN_RETI)
# WARNING: Could not evaluate: Z80_CTRL_PIN_MASK = Z80_M1 | Z80_MREQ | Z80_IORQ | Z80_RD | Z80_WR | Z80_RFSH
Z80_CTRL_PIN_MASK = "Z80_M1 | Z80_MREQ | Z80_IORQ | Z80_RD | Z80_WR | Z80_RFSH" # C EXPR: Z80_M1|Z80_MREQ|Z80_IORQ|Z80_RD|Z80_WR|Z80_RFSH
Z80_PIN_MASK = (1 << 40)
Z80_CF = (1 << 0)
Z80_NF = (1 << 1)
Z80_VF = (1 << 2)
Z80_PF = Z80_VF
Z80_XF = (1 << 3)
Z80_HF = (1 << 4)
Z80_YF = (1 << 5)
Z80_ZF = (1 << 6)
Z80_SF = (1 << 7)
# WARNING: Could not evaluate: Z80_DDFD_M1_T2 = 1685
Z80_DDFD_M1_T2 = "1685" # C EXPR: 1685
# WARNING: Could not evaluate: Z80_DDFD_M1_T3 = 1686
Z80_DDFD_M1_T3 = "1686" # C EXPR: 1686
# WARNING: Could not evaluate: Z80_DDFD_M1_T4 = 1687
Z80_DDFD_M1_T4 = "1687" # C EXPR: 1687
# WARNING: Could not evaluate: Z80_DDFD_D_T1 = 1688
Z80_DDFD_D_T1 = "1688" # C EXPR: 1688
# WARNING: Could not evaluate: Z80_DDFD_D_T2 = 1689
Z80_DDFD_D_T2 = "1689" # C EXPR: 1689
# WARNING: Could not evaluate: Z80_DDFD_D_T3 = 1690
Z80_DDFD_D_T3 = "1690" # C EXPR: 1690
# WARNING: Could not evaluate: Z80_DDFD_D_T4 = 1691
Z80_DDFD_D_T4 = "1691" # C EXPR: 1691
# WARNING: Could not evaluate: Z80_DDFD_D_T5 = 1692
Z80_DDFD_D_T5 = "1692" # C EXPR: 1692
# WARNING: Could not evaluate: Z80_DDFD_D_T6 = 1693
Z80_DDFD_D_T6 = "1693" # C EXPR: 1693
# WARNING: Could not evaluate: Z80_DDFD_D_T7 = 1694
Z80_DDFD_D_T7 = "1694" # C EXPR: 1694
# WARNING: Could not evaluate: Z80_DDFD_D_T8 = 1695
Z80_DDFD_D_T8 = "1695" # C EXPR: 1695
# WARNING: Could not evaluate: Z80_DDFD_LDHLN_WR_T1 = 1696
Z80_DDFD_LDHLN_WR_T1 = "1696" # C EXPR: 1696
# WARNING: Could not evaluate: Z80_DDFD_LDHLN_WR_T2 = 1697
Z80_DDFD_LDHLN_WR_T2 = "1697" # C EXPR: 1697
# WARNING: Could not evaluate: Z80_DDFD_LDHLN_WR_T3 = 1698
Z80_DDFD_LDHLN_WR_T3 = "1698" # C EXPR: 1698
# WARNING: Could not evaluate: Z80_DDFD_LDHLN_OVERLAPPED = 1699
Z80_DDFD_LDHLN_OVERLAPPED = "1699" # C EXPR: 1699
# WARNING: Could not evaluate: Z80_CB_M1_T2 = 1700
Z80_CB_M1_T2 = "1700" # C EXPR: 1700
# WARNING: Could not evaluate: Z80_CB_M1_T3 = 1701
Z80_CB_M1_T3 = "1701" # C EXPR: 1701
# WARNING: Could not evaluate: Z80_CB_M1_T4 = 1702
Z80_CB_M1_T4 = "1702" # C EXPR: 1702
# WARNING: Could not evaluate: Z80_ED_M1_T2 = 1703
Z80_ED_M1_T2 = "1703" # C EXPR: 1703
# WARNING: Could not evaluate: Z80_ED_M1_T3 = 1704
Z80_ED_M1_T3 = "1704" # C EXPR: 1704
# WARNING: Could not evaluate: Z80_ED_M1_T4 = 1705
Z80_ED_M1_T4 = "1705" # C EXPR: 1705
# WARNING: Could not evaluate: Z80_M1_T2 = 1706
Z80_M1_T2 = "1706" # C EXPR: 1706
# WARNING: Could not evaluate: Z80_M1_T3 = 1707
Z80_M1_T3 = "1707" # C EXPR: 1707
# WARNING: Could not evaluate: Z80_M1_T4 = 1708
Z80_M1_T4 = "1708" # C EXPR: 1708
# WARNING: Could not evaluate: Z80_CB_STEP = 1612
Z80_CB_STEP = "1612" # C EXPR: 1612
# WARNING: Could not evaluate: Z80_CBHL_STEP = 1613
Z80_CBHL_STEP = "1613" # C EXPR: 1613
# WARNING: Could not evaluate: Z80_DDFDCB_STEP = 1621
Z80_DDFDCB_STEP = "1621" # C EXPR: 1621
# WARNING: Could not evaluate: Z80_INT_IM0_STEP = 1636
Z80_INT_IM0_STEP = "1636" # C EXPR: 1636
# WARNING: Could not evaluate: Z80_INT_IM1_STEP = 1642
Z80_INT_IM1_STEP = "1642" # C EXPR: 1642
# WARNING: Could not evaluate: Z80_INT_IM2_STEP = 1655
Z80_INT_IM2_STEP = "1655" # C EXPR: 1655
# WARNING: Could not evaluate: Z80_NMI_STEP = 1674
Z80_NMI_STEP = "1674" # C EXPR: 1674

# --- Pin Access Helper Functions (translated from C macros) ---
def Z80_MAKE_PINS(ctrl, addr, data):
    return ctrl | ((data & 0xFF) << Z80_PIN_D0) | (addr & 0xFFFF)

def Z80_GET_ADDR(p):
    return p & 0xFFFF

def Z80_SET_ADDR(p, a):
    return (p & ~0xFFFF) | (a & 0xFFFF)

def Z80_GET_DATA(p):
    return (p >> Z80_PIN_D0) & 0xFF

def Z80_SET_DATA(p, d):
    return (p & ~(0xFF << Z80_PIN_D0)) | ((d & 0xFF) << Z80_PIN_D0)

# --- Library Function Prototypes ---
def setup_prototypes(lib):
    """Sets up ctypes function prototypes on the loaded library object."""
    # z80_t structure needed for pointer types
    global z80_t
    lib.z80_init.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_init.restype = ctypes.c_uint64

    lib.z80_reset.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_reset.restype = ctypes.c_uint64

    lib.z80_tick.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint64]
    lib.z80_tick.restype = ctypes.c_uint64

    lib.z80_prefetch.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint16]
    lib.z80_prefetch.restype = ctypes.c_uint64

    lib.z80_opdone.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_opdone.restype = ctypes.c_bool

    lib.z80_get_pc.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_pc.restype = ctypes.c_uint16

    lib.z80_get_sp.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_sp.restype = ctypes.c_uint16

    lib.z80_get_af.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_af.restype = ctypes.c_uint16

    lib.z80_get_bc.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_bc.restype = ctypes.c_uint16

    lib.z80_get_de.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_de.restype = ctypes.c_uint16

    lib.z80_get_hl.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_hl.restype = ctypes.c_uint16

    lib.z80_get_ix.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_ix.restype = ctypes.c_uint16

    lib.z80_get_iy.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_iy.restype = ctypes.c_uint16

    lib.z80_get_wz.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_wz.restype = ctypes.c_uint16

    lib.z80_get_af_prime.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_af_prime.restype = ctypes.c_uint16

    lib.z80_get_bc_prime.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_bc_prime.restype = ctypes.c_uint16

    lib.z80_get_de_prime.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_de_prime.restype = ctypes.c_uint16

    lib.z80_get_hl_prime.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_hl_prime.restype = ctypes.c_uint16

    lib.z80_get_i.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_i.restype = ctypes.c_uint8

    lib.z80_get_r.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_r.restype = ctypes.c_uint8

    lib.z80_get_im.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_im.restype = ctypes.c_uint8

    lib.z80_get_iff1.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_iff1.restype = ctypes.c_bool

    lib.z80_get_iff2.argtypes = [ctypes.POINTER(z80_t)]
    lib.z80_get_iff2.restype = ctypes.c_bool

    lib.z80_set_pc.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint16]
    lib.z80_set_pc.restype = None

    lib.z80_set_sp.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint16]
    lib.z80_set_sp.restype = None

    lib.z80_set_af.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint16]
    lib.z80_set_af.restype = None

    lib.z80_set_bc.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint16]
    lib.z80_set_bc.restype = None

    lib.z80_set_de.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint16]
    lib.z80_set_de.restype = None

    lib.z80_set_hl.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint16]
    lib.z80_set_hl.restype = None

    lib.z80_set_ix.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint16]
    lib.z80_set_ix.restype = None

    lib.z80_set_iy.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint16]
    lib.z80_set_iy.restype = None

    lib.z80_set_af_prime.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint16]
    lib.z80_set_af_prime.restype = None

    lib.z80_set_bc_prime.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint16]
    lib.z80_set_bc_prime.restype = None

    lib.z80_set_de_prime.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint16]
    lib.z80_set_de_prime.restype = None

    lib.z80_set_hl_prime.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint16]
    lib.z80_set_hl_prime.restype = None

    lib.z80_set_i.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint8]
    lib.z80_set_i.restype = None

    lib.z80_set_r.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint8]
    lib.z80_set_r.restype = None

    lib.z80_set_im.argtypes = [ctypes.POINTER(z80_t), ctypes.c_uint8]
    lib.z80_set_im.restype = None

    lib.z80_set_iff1.argtypes = [ctypes.POINTER(z80_t), ctypes.c_bool]
    lib.z80_set_iff1.restype = None

    lib.z80_set_iff2.argtypes = [ctypes.POINTER(z80_t), ctypes.c_bool]
    lib.z80_set_iff2.restype = None

    lib.z80_get_state_size.argtypes = []
    lib.z80_get_state_size.restype = ctypes.c_size_t
